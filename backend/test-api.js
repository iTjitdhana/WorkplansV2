// ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ axios
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 5000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
const logResult = (testName, result, error = null) => {
  console.log(`\n=== ${testName} ===`);
  if (error) {
    console.error('‚ùå Error:', error.message);
    if (error.response) {
      console.error('Response:', error.response.data);
    }
  } else {
    console.log('‚úÖ Success:', JSON.stringify(result.data, null, 2));
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const runTests = async () => {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö ESP Tracker API');
  
  try {
    // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Health Check
    try {
      const health = await api.get('/health');
      logResult('Health Check', health);
    } catch (error) {
      logResult('Health Check', null, error);
    }

    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Plans
    try {
      const workPlans = await api.get('/work-plans');
      logResult('Get Work Plans', workPlans);
    } catch (error) {
      logResult('Get Work Plans', null, error);
    }

    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Work Plan ‡πÉ‡∏´‡∏°‡πà
    try {
      const newWorkPlan = {
        production_date: '2025-07-16',
        job_code: 'TEST001',
        job_name: 'Test Job ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        start_time: '09:00:00',
        end_time: '11:00:00',
        operators: [
          { id_code: 'EMP001' }
        ]
      };
      
      const createResult = await api.post('/work-plans', newWorkPlan);
      logResult('Create Work Plan', createResult);
      
      const createdId = createResult.data.data.id;
      
      // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Plan ‡∏ï‡∏≤‡∏° ID
      try {
        const workPlan = await api.get(`/work-plans/${createdId}`);
        logResult('Get Work Plan by ID', workPlan);
      } catch (error) {
        logResult('Get Work Plan by ID', null, error);
      }

      // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
      try {
        const startProcess = await api.post('/logs/start', {
          workPlanId: createdId,
          processNumber: 1
        });
        logResult('Start Process', startProcess);
      } catch (error) {
        logResult('Start Process', null, error);
      }

      // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
      try {
        const stopProcess = await api.post('/logs/stop', {
          workPlanId: createdId,
          processNumber: 1
        });
        logResult('Stop Process', stopProcess);
      } catch (error) {
        logResult('Stop Process', null, error);
      }

      // 7. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
      try {
        const processStatus = await api.get(`/logs/work-plan/${createdId}/status`);
        logResult('Get Process Status', processStatus);
      } catch (error) {
        logResult('Get Process Status', null, error);
      }

      // 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      try {
        const finishResult = await api.patch(`/work-plans/${createdId}/finish`);
        logResult('Mark as Finished', finishResult);
      } catch (error) {
        logResult('Mark as Finished', null, error);
      }

      // 9. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Logs
      try {
        const logs = await api.get(`/logs/work-plan/${createdId}`);
        logResult('Get Logs', logs);
      } catch (error) {
        logResult('Get Logs', null, error);
      }

      // 10. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï
      try {
        const summary = await api.get('/logs/summary/2025-07-16');
        logResult('Get Production Summary', summary);
      } catch (error) {
        logResult('Get Production Summary', null, error);
      }

      // 11. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Work Plan
      try {
        const updateData = {
          production_date: '2025-07-16',
          job_code: 'TEST001',
          job_name: 'Test Job (Updated)',
          start_time: '09:00:00',
          end_time: '12:00:00'
        };
        
        const updateResult = await api.put(`/work-plans/${createdId}`, updateData);
        logResult('Update Work Plan', updateResult);
      } catch (error) {
        logResult('Update Work Plan', null, error);
      }

      // 12. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏ö Work Plan (‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
      try {
        const deleteResult = await api.delete(`/work-plans/${createdId}`);
        logResult('Delete Work Plan', deleteResult);
      } catch (error) {
        logResult('Delete Work Plan', null, error);
      }

    } catch (error) {
      logResult('Create Work Plan', null, error);
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error.message);
  }
  
  console.log('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
};

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if (require.main === module) {
  runTests();
}

module.exports = { runTests }; 